# --- Global helpers (safe in conf.d includes) ---
resolver 127.0.0.11 ipv6=off valid=30s;

# WebSocket upgrade map
map $http_upgrade $connection_upgrade { default upgrade; '' close; }

# Basic method allowlist (used below)
map $request_method $allowed_method {
    default 0;
    GET     1;
    HEAD    1;
    POST    1;
}

# # --- HTTP (port 80) --- Blocked by ISP
# server {
#     listen 80 default_server;
#     server_name _;

#     # Let’s Encrypt HTTP-01 challenges (adjust root if you use webroot).
#     location ^~ /.well-known/acme-challenge/ {
#         root /var/www/certbot;   # mkdir -p /var/www/certbot (or your actual path)
#         default_type "text/plain";
#         access_log off;
#     }

#     # Everything else → HTTPS
#     location / {
#         return 301 https://$host$request_uri;
#     }
# }

# --- Catch-all HTTPS (unknown hosts) ---
server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    server_name _;

    ssl_certificate     /etc/letsencrypt/live/wintermind.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wintermind.io/privkey.pem;

    # Don't reveal anything on random host/IP hits
    return 444;
}

# ===========================
# SHARED SECURITY SNIPPETS
# (repeat per server{} that serves user traffic)
# ===========================
# Block secrets / dotfiles / VCS / lockfiles / backups
# (Place inside each server{} that serves requests.)
# location = /.env              { return 404; }
# location ~ /\.(?!well-known)  { deny all; }        # blocks .git, .ssh, .ht*, dotfiles
# location ~* \.(log|ini|sh|bak|sw[op]|sql(\.gz)?|sqlite3?)$ { return 404; }
# location ~* /(composer\.(json|lock)|package(-lock)?\.json|yarn\.lock|pnpm-lock\.yaml|Dockerfile|docker-compose\.ya?ml|Makefile|id_rsa|id_dsa|authorized_keys|known_hosts|\.npmrc|\.bash_history|config\.(php|ya?ml|json))$ { return 404; }

# ===========================
# HTTPS: app.wintermind.io → Next.js container
# ===========================
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name app.wintermind.io;

    ssl_certificate     /etc/letsencrypt/live/wintermind.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wintermind.io/privkey.pem;

    # --- Security headers ---
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # --- Basic request hardening ---
    client_max_body_size 16m;                 # adjust if you support large uploads
    if ($allowed_method = 0) { return 405; }  # allow only GET/HEAD/POST
    # naive traversal guard
    if ($request_uri ~ "\.\./") { return 400; }

    # --- Block secrets / dotfiles / backups ---
    location = /.env { return 404; }
    location ~ /\.(?!well-known)              { deny all; }
    location ~* \.(log|ini|sh|bak|sw[op]|sql(\.gz)?|sqlite3?)$ { return 404; }
    location ~* /(composer\.(json|lock)|package(-lock)?\.json|yarn\.lock|pnpm-lock\.yaml|Dockerfile|docker-compose\.ya?ml|Makefile|id_rsa|id_dsa|authorized_keys|known_hosts|\.npmrc|\.bash_history|config\.(php|ya?ml|json))$ { return 404; }

    # --- Upstream ---
    set $backend http://web:3000;

    location / {
        proxy_pass $backend;
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        $connection_upgrade;

        proxy_connect_timeout 2s;
        proxy_read_timeout    15s;
        proxy_send_timeout    15s;
        proxy_buffering on;                # default; can be off for SSE
        proxy_intercept_errors on;
    }

    # Friendly fallback if upstream is down
    error_page 502 503 504 = @fallback;

    location @fallback {
        # Serve a static maintenance page if proxy fails
        root /usr/share/nginx/html;
        try_files /maintenance.html =502;
    }
}

# ===========================
# HTTPS: apex wintermind.io → static files
# ===========================
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name wintermind.io www.wintermind.io;

    ssl_certificate     /etc/letsencrypt/live/wintermind.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wintermind.io/privkey.pem;

    # Security headers for static
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    client_max_body_size 16m;
    if ($allowed_method = 0) { return 405; }
    if ($request_uri ~ "\.\./") { return 400; }

    # Block secrets / dotfiles on static host too
    location = /.env { return 404; }
    location ~ /\.(?!well-known)              { deny all; }
    location ~* \.(log|ini|sh|bak|sw[op]|sql(\.gz)?|sqlite3?)$ { return 404; }
    location ~* /(composer\.(json|lock)|package(-lock)?\.json|yarn\.lock|pnpm-lock\.yaml|Dockerfile|docker-compose\.ya?ml|Makefile|id_rsa|id_dsa|authorized_keys|known_hosts|\.npmrc|\.bash_history|config\.(php|ya?ml|json))$ { return 404; }

    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    # Optional: cache static assets aggressively
    location ~* \.(?:jpg|jpeg|png|gif|ico|webp|avif|svg|css|js|woff2?)$ {
        expires 30d;
        access_log off;
        try_files $uri =404;
    }
}

# ===========================
# Optional: dedicated fallback host
# ===========================
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name fallback.wintermind.io;

    ssl_certificate     /etc/letsencrypt/live/wintermind.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wintermind.io/privkey.pem;

    # Security headers, same as above
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Block secrets here too
    location = /.env { return 404; }
    location ~ /\.(?!well-known)              { deny all; }
    location ~* \.(log|ini|sh|bak|sw[op]|sql(\.gz)?|sqlite3?)$ { return 404; }
    location ~* /(composer\.(json|lock)|package(-lock)?\.json|yarn\.lock|pnpm-lock\.yaml|Dockerfile|docker-compose\.ya?ml|Makefile|id_rsa|id_dsa|authorized_keys|known_hosts|\.npmrc|\.bash_history|config\.(php|ya?ml|json))$ { return 404; }

    root /usr/share/nginx/html;

    location @fallback {
        try_files /maintenance.html =502;
    }
}
